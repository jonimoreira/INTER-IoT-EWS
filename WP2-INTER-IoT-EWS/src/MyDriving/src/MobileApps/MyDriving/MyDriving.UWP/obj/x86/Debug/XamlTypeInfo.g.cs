//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MyDriving.UWP
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MyDriving.UWP.MyDriving_UWP_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[43];
            _typeNameTable[0] = "MyDriving.UWP.Converters.StringFormatConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "MyDriving.UWP.Converters.ImageSourceConverter";
            _typeNameTable[3] = "MyDriving.UWP.Converters.DistanceConverter";
            _typeNameTable[4] = "MyDriving.UWP.Converters.TimeConverter";
            _typeNameTable[5] = "MyDriving.UWP.Converters.SpeedConverter";
            _typeNameTable[6] = "MyDriving.UWP.Converters.NotConverter";
            _typeNameTable[7] = "MyDriving.UWP.Controls.CirclePercentage";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[9] = "MyDriving.UWP.Controls.DotsControl";
            _typeNameTable[10] = "MyDriving.UWP.Controls.ProfileViewTabControl";
            _typeNameTable[11] = "String";
            _typeNameTable[12] = "MyDriving.UWP.Controls.SplitViewButtonContent";
            _typeNameTable[13] = "MyDriving.UWP.Views.CurrentTripView";
            _typeNameTable[14] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[15] = "System.Collections.Generic.IList`1<Windows.Devices.Geolocation.BasicGeoposition>";
            _typeNameTable[16] = "Windows.Devices.Geolocation.BasicGeoposition";
            _typeNameTable[17] = "System.ValueType";
            _typeNameTable[18] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[19] = "MyDriving.UWP.Views.GetStarted1";
            _typeNameTable[20] = "MyDriving.UWP.Views.GetStarted2";
            _typeNameTable[21] = "MyDriving.UWP.Views.GetStarted3";
            _typeNameTable[22] = "MyDriving.UWP.Views.GetStarted4";
            _typeNameTable[23] = "MyDriving.UWP.Views.GetStarted5";
            _typeNameTable[24] = "MyDriving.UWP.Views.PastTripMapView";
            _typeNameTable[25] = "System.Collections.Generic.List`1<MyDriving.DataObjects.TripPoint>";
            _typeNameTable[26] = "MyDriving.DataObjects.TripPoint";
            _typeNameTable[27] = "MyDriving.DataObjects.BaseDataObject";
            _typeNameTable[28] = "MvvmHelpers.ObservableObject";
            _typeNameTable[29] = "Double";
            _typeNameTable[30] = "System.DateTime";
            _typeNameTable[31] = "Int32";
            _typeNameTable[32] = "Boolean";
            _typeNameTable[33] = "MyDriving.UWP.Views.ProfileView";
            _typeNameTable[34] = "MyDriving.UWP.Views.SettingsView";
            _typeNameTable[35] = "MyDriving.UWP.Views.SplitViewShell";
            _typeNameTable[36] = "MyDriving.UWP.Views.PastTripsMenuView";
            _typeNameTable[37] = "MyDriving.ViewModel.PastTripsViewModel";
            _typeNameTable[38] = "MyDriving.ViewModel.ViewModelBase";
            _typeNameTable[39] = "MvvmHelpers.BaseViewModel";
            _typeNameTable[40] = "MyDriving.UWP.Views.LoginView";
            _typeNameTable[41] = "MyDriving.UWP.Views.TripSummaryView";
            _typeNameTable[42] = "MyDriving.ViewModel.TripSummaryViewModel";

            _typeTable = new global::System.Type[43];
            _typeTable[0] = typeof(global::MyDriving.UWP.Converters.StringFormatConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::MyDriving.UWP.Converters.ImageSourceConverter);
            _typeTable[3] = typeof(global::MyDriving.UWP.Converters.DistanceConverter);
            _typeTable[4] = typeof(global::MyDriving.UWP.Converters.TimeConverter);
            _typeTable[5] = typeof(global::MyDriving.UWP.Converters.SpeedConverter);
            _typeTable[6] = typeof(global::MyDriving.UWP.Converters.NotConverter);
            _typeTable[7] = typeof(global::MyDriving.UWP.Controls.CirclePercentage);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[9] = typeof(global::MyDriving.UWP.Controls.DotsControl);
            _typeTable[10] = typeof(global::MyDriving.UWP.Controls.ProfileViewTabControl);
            _typeTable[11] = typeof(global::System.String);
            _typeTable[12] = typeof(global::MyDriving.UWP.Controls.SplitViewButtonContent);
            _typeTable[13] = typeof(global::MyDriving.UWP.Views.CurrentTripView);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[15] = typeof(global::System.Collections.Generic.IList<global::Windows.Devices.Geolocation.BasicGeoposition>);
            _typeTable[16] = typeof(global::Windows.Devices.Geolocation.BasicGeoposition);
            _typeTable[17] = typeof(global::System.ValueType);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[19] = typeof(global::MyDriving.UWP.Views.GetStarted1);
            _typeTable[20] = typeof(global::MyDriving.UWP.Views.GetStarted2);
            _typeTable[21] = typeof(global::MyDriving.UWP.Views.GetStarted3);
            _typeTable[22] = typeof(global::MyDriving.UWP.Views.GetStarted4);
            _typeTable[23] = typeof(global::MyDriving.UWP.Views.GetStarted5);
            _typeTable[24] = typeof(global::MyDriving.UWP.Views.PastTripMapView);
            _typeTable[25] = typeof(global::System.Collections.Generic.List<global::MyDriving.DataObjects.TripPoint>);
            _typeTable[26] = typeof(global::MyDriving.DataObjects.TripPoint);
            _typeTable[27] = typeof(global::MyDriving.DataObjects.BaseDataObject);
            _typeTable[28] = typeof(global::MvvmHelpers.ObservableObject);
            _typeTable[29] = typeof(global::System.Double);
            _typeTable[30] = typeof(global::System.DateTime);
            _typeTable[31] = typeof(global::System.Int32);
            _typeTable[32] = typeof(global::System.Boolean);
            _typeTable[33] = typeof(global::MyDriving.UWP.Views.ProfileView);
            _typeTable[34] = typeof(global::MyDriving.UWP.Views.SettingsView);
            _typeTable[35] = typeof(global::MyDriving.UWP.Views.SplitViewShell);
            _typeTable[36] = typeof(global::MyDriving.UWP.Views.PastTripsMenuView);
            _typeTable[37] = typeof(global::MyDriving.ViewModel.PastTripsViewModel);
            _typeTable[38] = typeof(global::MyDriving.ViewModel.ViewModelBase);
            _typeTable[39] = typeof(global::MvvmHelpers.BaseViewModel);
            _typeTable[40] = typeof(global::MyDriving.UWP.Views.LoginView);
            _typeTable[41] = typeof(global::MyDriving.UWP.Views.TripSummaryView);
            _typeTable[42] = typeof(global::MyDriving.ViewModel.TripSummaryViewModel);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_StringFormatConverter() { return new global::MyDriving.UWP.Converters.StringFormatConverter(); }
        private object Activate_2_ImageSourceConverter() { return new global::MyDriving.UWP.Converters.ImageSourceConverter(); }
        private object Activate_3_DistanceConverter() { return new global::MyDriving.UWP.Converters.DistanceConverter(); }
        private object Activate_4_TimeConverter() { return new global::MyDriving.UWP.Converters.TimeConverter(); }
        private object Activate_5_SpeedConverter() { return new global::MyDriving.UWP.Converters.SpeedConverter(); }
        private object Activate_6_NotConverter() { return new global::MyDriving.UWP.Converters.NotConverter(); }
        private object Activate_7_CirclePercentage() { return new global::MyDriving.UWP.Controls.CirclePercentage(); }
        private object Activate_9_DotsControl() { return new global::MyDriving.UWP.Controls.DotsControl(); }
        private object Activate_10_ProfileViewTabControl() { return new global::MyDriving.UWP.Controls.ProfileViewTabControl(); }
        private object Activate_12_SplitViewButtonContent() { return new global::MyDriving.UWP.Controls.SplitViewButtonContent(); }
        private object Activate_13_CurrentTripView() { return new global::MyDriving.UWP.Views.CurrentTripView(); }
        private object Activate_19_GetStarted1() { return new global::MyDriving.UWP.Views.GetStarted1(); }
        private object Activate_20_GetStarted2() { return new global::MyDriving.UWP.Views.GetStarted2(); }
        private object Activate_21_GetStarted3() { return new global::MyDriving.UWP.Views.GetStarted3(); }
        private object Activate_22_GetStarted4() { return new global::MyDriving.UWP.Views.GetStarted4(); }
        private object Activate_23_GetStarted5() { return new global::MyDriving.UWP.Views.GetStarted5(); }
        private object Activate_24_PastTripMapView() { return new global::MyDriving.UWP.Views.PastTripMapView(); }
        private object Activate_25_List() { return new global::System.Collections.Generic.List<global::MyDriving.DataObjects.TripPoint>(); }
        private object Activate_26_TripPoint() { return new global::MyDriving.DataObjects.TripPoint(); }
        private object Activate_27_BaseDataObject() { return new global::MyDriving.DataObjects.BaseDataObject(); }
        private object Activate_28_ObservableObject() { return new global::MvvmHelpers.ObservableObject(); }
        private object Activate_33_ProfileView() { return new global::MyDriving.UWP.Views.ProfileView(); }
        private object Activate_34_SettingsView() { return new global::MyDriving.UWP.Views.SettingsView(); }
        private object Activate_36_PastTripsMenuView() { return new global::MyDriving.UWP.Views.PastTripsMenuView(); }
        private object Activate_37_PastTripsViewModel() { return new global::MyDriving.ViewModel.PastTripsViewModel(); }
        private object Activate_38_ViewModelBase() { return new global::MyDriving.ViewModel.ViewModelBase(); }
        private object Activate_39_BaseViewModel() { return new global::MvvmHelpers.BaseViewModel(); }
        private object Activate_40_LoginView() { return new global::MyDriving.UWP.Views.LoginView(); }
        private object Activate_41_TripSummaryView() { return new global::MyDriving.UWP.Views.TripSummaryView(); }
        private object Activate_42_TripSummaryViewModel() { return new global::MyDriving.ViewModel.TripSummaryViewModel(); }
        private void VectorAdd_15_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.Devices.Geolocation.BasicGeoposition>)instance;
            var newItem = (global::Windows.Devices.Geolocation.BasicGeoposition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyDriving.DataObjects.TripPoint>)instance;
            var newItem = (global::MyDriving.DataObjects.TripPoint)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MyDriving.UWP.Converters.StringFormatConverter
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_StringFormatConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  MyDriving.UWP.Converters.ImageSourceConverter
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_ImageSourceConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  MyDriving.UWP.Converters.DistanceConverter
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_DistanceConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  MyDriving.UWP.Converters.TimeConverter
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_TimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  MyDriving.UWP.Converters.SpeedConverter
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_SpeedConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  MyDriving.UWP.Converters.NotConverter
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_NotConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  MyDriving.UWP.Controls.CirclePercentage
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_CirclePercentage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  MyDriving.UWP.Controls.DotsControl
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_DotsControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  MyDriving.UWP.Controls.ProfileViewTabControl
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_10_ProfileViewTabControl;
                userType.AddMemberName("Title1");
                userType.AddMemberName("Title2");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  String
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  MyDriving.UWP.Controls.SplitViewButtonContent
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_SplitViewButtonContent;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  MyDriving.UWP.Views.CurrentTripView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_13_CurrentTripView;
                userType.AddMemberName("Locations");
                userType.AddMemberName("RecordButtonImage");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  System.Collections.Generic.IList`1<Windows.Devices.Geolocation.BasicGeoposition>
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_15_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Windows.Devices.Geolocation.BasicGeoposition
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 17:   //  System.ValueType
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  MyDriving.UWP.Views.GetStarted1
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_GetStarted1;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  MyDriving.UWP.Views.GetStarted2
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_GetStarted2;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  MyDriving.UWP.Views.GetStarted3
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_GetStarted3;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  MyDriving.UWP.Views.GetStarted4
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_GetStarted4;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  MyDriving.UWP.Views.GetStarted5
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_GetStarted5;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  MyDriving.UWP.Views.PastTripMapView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_PastTripMapView;
                userType.AddMemberName("Locations");
                userType.AddMemberName("TripPoints");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.Generic.List`1<MyDriving.DataObjects.TripPoint>
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_25_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  MyDriving.DataObjects.TripPoint
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyDriving.DataObjects.BaseDataObject"));
                userType.Activator = Activate_26_TripPoint;
                userType.AddMemberName("TripId");
                userType.AddMemberName("Latitude");
                userType.AddMemberName("Longitude");
                userType.AddMemberName("Speed");
                userType.AddMemberName("RecordedTimeStamp");
                userType.AddMemberName("Sequence");
                userType.AddMemberName("RPM");
                userType.AddMemberName("ShortTermFuelBank");
                userType.AddMemberName("LongTermFuelBank");
                userType.AddMemberName("ThrottlePosition");
                userType.AddMemberName("RelativeThrottlePosition");
                userType.AddMemberName("Runtime");
                userType.AddMemberName("DistanceWithMalfunctionLight");
                userType.AddMemberName("EngineLoad");
                userType.AddMemberName("MassFlowRate");
                userType.AddMemberName("EngineFuelRate");
                userType.AddMemberName("VIN");
                userType.AddMemberName("HasOBDData");
                userType.AddMemberName("HasSimulatedOBDData");
                xamlType = userType;
                break;

            case 27:   //  MyDriving.DataObjects.BaseDataObject
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmHelpers.ObservableObject"));
                userType.Activator = Activate_27_BaseDataObject;
                userType.AddMemberName("Id");
                xamlType = userType;
                break;

            case 28:   //  MvvmHelpers.ObservableObject
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_28_ObservableObject;
                xamlType = userType;
                break;

            case 29:   //  Double
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  System.DateTime
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  Int32
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Boolean
                xamlType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  MyDriving.UWP.Views.ProfileView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_ProfileView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  MyDriving.UWP.Views.SettingsView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_SettingsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  MyDriving.UWP.Views.SplitViewShell
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  MyDriving.UWP.Views.PastTripsMenuView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_36_PastTripsMenuView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  MyDriving.ViewModel.PastTripsViewModel
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyDriving.ViewModel.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  MyDriving.ViewModel.ViewModelBase
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmHelpers.BaseViewModel"));
                userType.Activator = Activate_38_ViewModelBase;
                xamlType = userType;
                break;

            case 39:   //  MvvmHelpers.BaseViewModel
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MvvmHelpers.ObservableObject"));
                userType.Activator = Activate_39_BaseViewModel;
                xamlType = userType;
                break;

            case 40:   //  MyDriving.UWP.Views.LoginView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_40_LoginView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  MyDriving.UWP.Views.TripSummaryView
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_TripSummaryView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  MyDriving.ViewModel.TripSummaryViewModel
                userType = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyDriving.ViewModel.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Acr.UserDialogs.Acr_UserDialogs_Uwp_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Coding4Fun.Toolkit.Controls.Coding4Fun_Toolkit_Controls__Win8_1__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ProfileViewTabControl_Title1(object instance)
        {
            var that = (global::MyDriving.UWP.Controls.ProfileViewTabControl)instance;
            return that.Title1;
        }
        private void set_0_ProfileViewTabControl_Title1(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Controls.ProfileViewTabControl)instance;
            that.Title1 = (global::System.String)Value;
        }
        private object get_1_ProfileViewTabControl_Title2(object instance)
        {
            var that = (global::MyDriving.UWP.Controls.ProfileViewTabControl)instance;
            return that.Title2;
        }
        private void set_1_ProfileViewTabControl_Title2(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Controls.ProfileViewTabControl)instance;
            that.Title2 = (global::System.String)Value;
        }
        private object get_2_CurrentTripView_Locations(object instance)
        {
            var that = (global::MyDriving.UWP.Views.CurrentTripView)instance;
            return that.Locations;
        }
        private void set_2_CurrentTripView_Locations(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Views.CurrentTripView)instance;
            that.Locations = (global::System.Collections.Generic.IList<global::Windows.Devices.Geolocation.BasicGeoposition>)Value;
        }
        private object get_3_CurrentTripView_RecordButtonImage(object instance)
        {
            var that = (global::MyDriving.UWP.Views.CurrentTripView)instance;
            return that.RecordButtonImage;
        }
        private object get_4_PastTripMapView_Locations(object instance)
        {
            var that = (global::MyDriving.UWP.Views.PastTripMapView)instance;
            return that.Locations;
        }
        private void set_4_PastTripMapView_Locations(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Views.PastTripMapView)instance;
            that.Locations = (global::System.Collections.Generic.IList<global::Windows.Devices.Geolocation.BasicGeoposition>)Value;
        }
        private object get_5_PastTripMapView_TripPoints(object instance)
        {
            var that = (global::MyDriving.UWP.Views.PastTripMapView)instance;
            return that.TripPoints;
        }
        private void set_5_PastTripMapView_TripPoints(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Views.PastTripMapView)instance;
            that.TripPoints = (global::System.Collections.Generic.List<global::MyDriving.DataObjects.TripPoint>)Value;
        }
        private object get_6_TripPoint_TripId(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.TripId;
        }
        private void set_6_TripPoint_TripId(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.TripId = (global::System.String)Value;
        }
        private object get_7_TripPoint_Latitude(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.Latitude;
        }
        private void set_7_TripPoint_Latitude(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.Latitude = (global::System.Double)Value;
        }
        private object get_8_TripPoint_Longitude(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.Longitude;
        }
        private void set_8_TripPoint_Longitude(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.Longitude = (global::System.Double)Value;
        }
        private object get_9_TripPoint_Speed(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.Speed;
        }
        private void set_9_TripPoint_Speed(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.Speed = (global::System.Double)Value;
        }
        private object get_10_TripPoint_RecordedTimeStamp(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.RecordedTimeStamp;
        }
        private void set_10_TripPoint_RecordedTimeStamp(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.RecordedTimeStamp = (global::System.DateTime)Value;
        }
        private object get_11_TripPoint_Sequence(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.Sequence;
        }
        private void set_11_TripPoint_Sequence(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.Sequence = (global::System.Int32)Value;
        }
        private object get_12_TripPoint_RPM(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.RPM;
        }
        private void set_12_TripPoint_RPM(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.RPM = (global::System.Double)Value;
        }
        private object get_13_TripPoint_ShortTermFuelBank(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.ShortTermFuelBank;
        }
        private void set_13_TripPoint_ShortTermFuelBank(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.ShortTermFuelBank = (global::System.Double)Value;
        }
        private object get_14_TripPoint_LongTermFuelBank(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.LongTermFuelBank;
        }
        private void set_14_TripPoint_LongTermFuelBank(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.LongTermFuelBank = (global::System.Double)Value;
        }
        private object get_15_TripPoint_ThrottlePosition(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.ThrottlePosition;
        }
        private void set_15_TripPoint_ThrottlePosition(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.ThrottlePosition = (global::System.Double)Value;
        }
        private object get_16_TripPoint_RelativeThrottlePosition(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.RelativeThrottlePosition;
        }
        private void set_16_TripPoint_RelativeThrottlePosition(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.RelativeThrottlePosition = (global::System.Double)Value;
        }
        private object get_17_TripPoint_Runtime(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.Runtime;
        }
        private void set_17_TripPoint_Runtime(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.Runtime = (global::System.Double)Value;
        }
        private object get_18_TripPoint_DistanceWithMalfunctionLight(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.DistanceWithMalfunctionLight;
        }
        private void set_18_TripPoint_DistanceWithMalfunctionLight(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.DistanceWithMalfunctionLight = (global::System.Double)Value;
        }
        private object get_19_TripPoint_EngineLoad(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.EngineLoad;
        }
        private void set_19_TripPoint_EngineLoad(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.EngineLoad = (global::System.Double)Value;
        }
        private object get_20_TripPoint_MassFlowRate(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.MassFlowRate;
        }
        private void set_20_TripPoint_MassFlowRate(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.MassFlowRate = (global::System.Double)Value;
        }
        private object get_21_TripPoint_EngineFuelRate(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.EngineFuelRate;
        }
        private void set_21_TripPoint_EngineFuelRate(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.EngineFuelRate = (global::System.Double)Value;
        }
        private object get_22_TripPoint_VIN(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.VIN;
        }
        private void set_22_TripPoint_VIN(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.VIN = (global::System.String)Value;
        }
        private object get_23_TripPoint_HasOBDData(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.HasOBDData;
        }
        private void set_23_TripPoint_HasOBDData(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.HasOBDData = (global::System.Boolean)Value;
        }
        private object get_24_TripPoint_HasSimulatedOBDData(object instance)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            return that.HasSimulatedOBDData;
        }
        private void set_24_TripPoint_HasSimulatedOBDData(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.TripPoint)instance;
            that.HasSimulatedOBDData = (global::System.Boolean)Value;
        }
        private object get_25_BaseDataObject_Id(object instance)
        {
            var that = (global::MyDriving.DataObjects.BaseDataObject)instance;
            return that.Id;
        }
        private void set_25_BaseDataObject_Id(object instance, object Value)
        {
            var that = (global::MyDriving.DataObjects.BaseDataObject)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_26_PastTripsMenuView_ViewModel(object instance)
        {
            var that = (global::MyDriving.UWP.Views.PastTripsMenuView)instance;
            return that.ViewModel;
        }
        private void set_26_PastTripsMenuView_ViewModel(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Views.PastTripsMenuView)instance;
            that.ViewModel = (global::MyDriving.ViewModel.PastTripsViewModel)Value;
        }
        private object get_27_TripSummaryView_ViewModel(object instance)
        {
            var that = (global::MyDriving.UWP.Views.TripSummaryView)instance;
            return that.ViewModel;
        }
        private void set_27_TripSummaryView_ViewModel(object instance, object Value)
        {
            var that = (global::MyDriving.UWP.Views.TripSummaryView)instance;
            that.ViewModel = (global::MyDriving.ViewModel.TripSummaryViewModel)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyDriving.UWP.Controls.ProfileViewTabControl.Title1":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Controls.ProfileViewTabControl");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Title1", "String");
                xamlMember.Getter = get_0_ProfileViewTabControl_Title1;
                xamlMember.Setter = set_0_ProfileViewTabControl_Title1;
                break;
            case "MyDriving.UWP.Controls.ProfileViewTabControl.Title2":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Controls.ProfileViewTabControl");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Title2", "String");
                xamlMember.Getter = get_1_ProfileViewTabControl_Title2;
                xamlMember.Setter = set_1_ProfileViewTabControl_Title2;
                break;
            case "MyDriving.UWP.Views.CurrentTripView.Locations":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Views.CurrentTripView");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Locations", "System.Collections.Generic.IList`1<Windows.Devices.Geolocation.BasicGeoposition>");
                xamlMember.Getter = get_2_CurrentTripView_Locations;
                xamlMember.Setter = set_2_CurrentTripView_Locations;
                break;
            case "MyDriving.UWP.Views.CurrentTripView.RecordButtonImage":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Views.CurrentTripView");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "RecordButtonImage", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_3_CurrentTripView_RecordButtonImage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyDriving.UWP.Views.PastTripMapView.Locations":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Views.PastTripMapView");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Locations", "System.Collections.Generic.IList`1<Windows.Devices.Geolocation.BasicGeoposition>");
                xamlMember.Getter = get_4_PastTripMapView_Locations;
                xamlMember.Setter = set_4_PastTripMapView_Locations;
                break;
            case "MyDriving.UWP.Views.PastTripMapView.TripPoints":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Views.PastTripMapView");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "TripPoints", "System.Collections.Generic.List`1<MyDriving.DataObjects.TripPoint>");
                xamlMember.Getter = get_5_PastTripMapView_TripPoints;
                xamlMember.Setter = set_5_PastTripMapView_TripPoints;
                break;
            case "MyDriving.DataObjects.TripPoint.TripId":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "TripId", "String");
                xamlMember.Getter = get_6_TripPoint_TripId;
                xamlMember.Setter = set_6_TripPoint_TripId;
                break;
            case "MyDriving.DataObjects.TripPoint.Latitude":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Latitude", "Double");
                xamlMember.Getter = get_7_TripPoint_Latitude;
                xamlMember.Setter = set_7_TripPoint_Latitude;
                break;
            case "MyDriving.DataObjects.TripPoint.Longitude":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Longitude", "Double");
                xamlMember.Getter = get_8_TripPoint_Longitude;
                xamlMember.Setter = set_8_TripPoint_Longitude;
                break;
            case "MyDriving.DataObjects.TripPoint.Speed":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Speed", "Double");
                xamlMember.Getter = get_9_TripPoint_Speed;
                xamlMember.Setter = set_9_TripPoint_Speed;
                break;
            case "MyDriving.DataObjects.TripPoint.RecordedTimeStamp":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "RecordedTimeStamp", "System.DateTime");
                xamlMember.Getter = get_10_TripPoint_RecordedTimeStamp;
                xamlMember.Setter = set_10_TripPoint_RecordedTimeStamp;
                break;
            case "MyDriving.DataObjects.TripPoint.Sequence":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Sequence", "Int32");
                xamlMember.Getter = get_11_TripPoint_Sequence;
                xamlMember.Setter = set_11_TripPoint_Sequence;
                break;
            case "MyDriving.DataObjects.TripPoint.RPM":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "RPM", "Double");
                xamlMember.Getter = get_12_TripPoint_RPM;
                xamlMember.Setter = set_12_TripPoint_RPM;
                break;
            case "MyDriving.DataObjects.TripPoint.ShortTermFuelBank":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "ShortTermFuelBank", "Double");
                xamlMember.Getter = get_13_TripPoint_ShortTermFuelBank;
                xamlMember.Setter = set_13_TripPoint_ShortTermFuelBank;
                break;
            case "MyDriving.DataObjects.TripPoint.LongTermFuelBank":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "LongTermFuelBank", "Double");
                xamlMember.Getter = get_14_TripPoint_LongTermFuelBank;
                xamlMember.Setter = set_14_TripPoint_LongTermFuelBank;
                break;
            case "MyDriving.DataObjects.TripPoint.ThrottlePosition":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "ThrottlePosition", "Double");
                xamlMember.Getter = get_15_TripPoint_ThrottlePosition;
                xamlMember.Setter = set_15_TripPoint_ThrottlePosition;
                break;
            case "MyDriving.DataObjects.TripPoint.RelativeThrottlePosition":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "RelativeThrottlePosition", "Double");
                xamlMember.Getter = get_16_TripPoint_RelativeThrottlePosition;
                xamlMember.Setter = set_16_TripPoint_RelativeThrottlePosition;
                break;
            case "MyDriving.DataObjects.TripPoint.Runtime":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Runtime", "Double");
                xamlMember.Getter = get_17_TripPoint_Runtime;
                xamlMember.Setter = set_17_TripPoint_Runtime;
                break;
            case "MyDriving.DataObjects.TripPoint.DistanceWithMalfunctionLight":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "DistanceWithMalfunctionLight", "Double");
                xamlMember.Getter = get_18_TripPoint_DistanceWithMalfunctionLight;
                xamlMember.Setter = set_18_TripPoint_DistanceWithMalfunctionLight;
                break;
            case "MyDriving.DataObjects.TripPoint.EngineLoad":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "EngineLoad", "Double");
                xamlMember.Getter = get_19_TripPoint_EngineLoad;
                xamlMember.Setter = set_19_TripPoint_EngineLoad;
                break;
            case "MyDriving.DataObjects.TripPoint.MassFlowRate":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "MassFlowRate", "Double");
                xamlMember.Getter = get_20_TripPoint_MassFlowRate;
                xamlMember.Setter = set_20_TripPoint_MassFlowRate;
                break;
            case "MyDriving.DataObjects.TripPoint.EngineFuelRate":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "EngineFuelRate", "Double");
                xamlMember.Getter = get_21_TripPoint_EngineFuelRate;
                xamlMember.Setter = set_21_TripPoint_EngineFuelRate;
                break;
            case "MyDriving.DataObjects.TripPoint.VIN":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "VIN", "String");
                xamlMember.Getter = get_22_TripPoint_VIN;
                xamlMember.Setter = set_22_TripPoint_VIN;
                break;
            case "MyDriving.DataObjects.TripPoint.HasOBDData":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "HasOBDData", "Boolean");
                xamlMember.Getter = get_23_TripPoint_HasOBDData;
                xamlMember.Setter = set_23_TripPoint_HasOBDData;
                break;
            case "MyDriving.DataObjects.TripPoint.HasSimulatedOBDData":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.TripPoint");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "HasSimulatedOBDData", "Boolean");
                xamlMember.Getter = get_24_TripPoint_HasSimulatedOBDData;
                xamlMember.Setter = set_24_TripPoint_HasSimulatedOBDData;
                break;
            case "MyDriving.DataObjects.BaseDataObject.Id":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.DataObjects.BaseDataObject");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_25_BaseDataObject_Id;
                xamlMember.Setter = set_25_BaseDataObject_Id;
                break;
            case "MyDriving.UWP.Views.PastTripsMenuView.ViewModel":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Views.PastTripsMenuView");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "ViewModel", "MyDriving.ViewModel.PastTripsViewModel");
                xamlMember.Getter = get_26_PastTripsMenuView_ViewModel;
                xamlMember.Setter = set_26_PastTripsMenuView_ViewModel;
                break;
            case "MyDriving.UWP.Views.TripSummaryView.ViewModel":
                userType = (global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyDriving.UWP.Views.TripSummaryView");
                xamlMember = new global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlMember(this, "ViewModel", "MyDriving.ViewModel.TripSummaryViewModel");
                xamlMember.Getter = get_27_TripSummaryView_ViewModel;
                xamlMember.Setter = set_27_TripSummaryView_ViewModel;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlSystemBaseType
    {
        global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MyDriving.UWP.MyDriving_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

